"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Recommendation = void 0;
const bson_objectid_1 = __importDefault(require("bson-objectid"));
const errors_1 = __importDefault(require("@tryghost/errors"));
class Recommendation {
    id;
    title;
    reason;
    excerpt; // Fetched from the site meta data
    featuredImage; // Fetched from the site meta data
    favicon; // Fetched from the site meta data
    url;
    oneClickSubscribe;
    createdAt;
    updatedAt;
    #deleted;
    get deleted() {
        return this.#deleted;
    }
    constructor(data) {
        this.id = data.id;
        this.title = data.title;
        this.reason = data.reason;
        this.excerpt = data.excerpt;
        this.featuredImage = data.featuredImage;
        this.favicon = data.favicon;
        this.url = data.url;
        this.oneClickSubscribe = data.oneClickSubscribe;
        this.createdAt = data.createdAt;
        this.updatedAt = data.updatedAt;
        this.#deleted = false;
    }
    static validate(properties) {
        if (properties.url.protocol !== 'http:' && properties.url.protocol !== 'https:') {
            throw new errors_1.default.ValidationError({
                message: 'url must be a valid URL'
            });
        }
        if (properties.featuredImage !== null) {
            if (properties.featuredImage.protocol !== 'http:' && properties.featuredImage.protocol !== 'https:') {
                throw new errors_1.default.ValidationError({
                    message: 'Featured image must be a valid URL'
                });
            }
        }
        if (properties.favicon !== null) {
            if (properties.favicon.protocol !== 'http:' && properties.favicon.protocol !== 'https:') {
                throw new errors_1.default.ValidationError({
                    message: 'Favicon must be a valid URL'
                });
            }
        }
        if (properties.title.length === 0) {
            throw new errors_1.default.ValidationError({
                message: 'Title must not be empty'
            });
        }
        if (properties.title.length > 2000) {
            throw new errors_1.default.ValidationError({
                message: 'Title must be less than 2000 characters'
            });
        }
        if (properties.reason && properties.reason.length > 2000) {
            throw new errors_1.default.ValidationError({
                message: 'Reason must be less than 2000 characters'
            });
        }
        if (properties.excerpt && properties.excerpt.length > 2000) {
            throw new errors_1.default.ValidationError({
                message: 'Excerpt must be less than 2000 characters'
            });
        }
    }
    clean() {
        if (this.reason !== null && this.reason.length === 0) {
            this.reason = null;
        }
        this.createdAt.setMilliseconds(0);
        this.updatedAt?.setMilliseconds(0);
    }
    static create(data) {
        const id = data.id ?? (0, bson_objectid_1.default)().toString();
        const d = {
            id,
            title: data.title,
            reason: data.reason,
            excerpt: data.excerpt,
            featuredImage: data.featuredImage,
            favicon: data.favicon,
            url: data.url,
            oneClickSubscribe: data.oneClickSubscribe,
            createdAt: data.createdAt ?? new Date(),
            updatedAt: data.updatedAt ?? null
        };
        this.validate(d);
        const recommendation = new Recommendation(d);
        recommendation.clean();
        return recommendation;
    }
    edit(properties) {
        Recommendation.validate({ ...this, ...properties });
        Object.assign(this, properties);
        this.clean();
    }
    delete() {
        this.#deleted = true;
    }
}
exports.Recommendation = Recommendation;
//# sourceMappingURL=Recommendation.js.map