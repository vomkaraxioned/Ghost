"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendationService = void 0;
const Recommendation_1 = require("./Recommendation");
const errors_1 = __importDefault(require("@tryghost/errors"));
const tpl_1 = __importDefault(require("@tryghost/tpl"));
const messages = {
    notFound: 'Recommendation with id {id} not found'
};
class RecommendationService {
    repository;
    wellknownService;
    mentionSendingService;
    recommendationEnablerService;
    constructor(deps) {
        this.repository = deps.repository;
        this.wellknownService = deps.wellknownService;
        this.mentionSendingService = deps.mentionSendingService;
        this.recommendationEnablerService = deps.recommendationEnablerService;
    }
    async init() {
        const recommendations = await this.listRecommendations();
        await this.updateWellknown(recommendations);
    }
    async updateWellknown(recommendations) {
        await this.wellknownService.set(recommendations);
    }
    async updateRecommendationsEnabledSetting(recommendations) {
        const expectedSetting = (recommendations.length > 0).toString();
        const currentSetting = this.recommendationEnablerService.getSetting();
        if (currentSetting && currentSetting === expectedSetting) {
            return;
        }
        await this.recommendationEnablerService.setSetting(expectedSetting);
    }
    sendMentionToRecommendation(recommendation) {
        this.mentionSendingService.sendAll({
            url: this.wellknownService.getURL(),
            links: [
                recommendation.url
            ]
        }).catch(console.error); // eslint-disable-line no-console
    }
    async addRecommendation(addRecommendation) {
        const recommendation = Recommendation_1.Recommendation.create(addRecommendation);
        await this.repository.save(recommendation);
        const recommendations = await this.listRecommendations();
        await this.updateWellknown(recommendations);
        await this.updateRecommendationsEnabledSetting(recommendations);
        // Only send an update for the mentioned URL
        this.sendMentionToRecommendation(recommendation);
        return recommendation;
    }
    async editRecommendation(id, recommendationEdit) {
        // Check if it exists
        const existing = await this.repository.getById(id);
        if (!existing) {
            throw new errors_1.default.NotFoundError({
                message: (0, tpl_1.default)(messages.notFound, { id })
            });
        }
        existing.edit(recommendationEdit);
        await this.repository.save(existing);
        const recommendations = await this.listRecommendations();
        await this.updateWellknown(recommendations);
        this.sendMentionToRecommendation(existing);
        return existing;
    }
    async deleteRecommendation(id) {
        const existing = await this.repository.getById(id);
        if (!existing) {
            throw new errors_1.default.NotFoundError({
                message: (0, tpl_1.default)(messages.notFound, { id })
            });
        }
        existing.delete();
        await this.repository.save(existing);
        const recommendations = await this.listRecommendations();
        await this.updateWellknown(recommendations);
        await this.updateRecommendationsEnabledSetting(recommendations);
        // Send a mention (because it was deleted, according to the webmentions spec)
        this.sendMentionToRecommendation(existing);
    }
    async listRecommendations({ page, limit, filter, order } = { page: 1, limit: 'all' }) {
        if (limit === 'all') {
            return await this.repository.getAll({ filter, order });
        }
        return await this.repository.getPage({ page, limit, filter, order });
    }
    async countRecommendations({ filter }) {
        return await this.repository.getCount({ filter });
    }
}
exports.RecommendationService = RecommendationService;
//# sourceMappingURL=RecommendationService.js.map