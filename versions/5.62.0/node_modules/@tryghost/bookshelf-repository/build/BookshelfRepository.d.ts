type Entity<T> = {
    id: T;
    deleted: boolean;
};
type Order<T> = {
    field: keyof T;
    direction: 'asc' | 'desc';
};
export type ModelClass<T> = {
    destroy: (data: {
        id: T;
    }) => Promise<void>;
    findOne: (data: {
        id: T;
    }, options?: {
        require?: boolean;
    }) => Promise<ModelInstance<T> | null>;
    findAll: (options: {
        filter?: string;
        order?: string;
        page?: number;
        limit?: number | 'all';
    }) => Promise<ModelInstance<T>[]>;
    add: (data: object) => Promise<ModelInstance<T>>;
    getFilteredCollection: (options: {
        filter?: string;
    }) => {
        count(): Promise<number>;
    };
};
export type ModelInstance<T> = {
    id: T;
    get(field: string): unknown;
    set(data: object | string, value?: unknown): void;
    save(properties: object, options?: {
        autoRefresh?: boolean;
        method?: 'update' | 'insert';
    }): Promise<ModelInstance<T>>;
};
export type OrderOption<T extends Entity<any> = any> = Order<T>[];
export declare abstract class BookshelfRepository<IDType, T extends Entity<IDType>> {
    #private;
    protected Model: ModelClass<IDType>;
    constructor(Model: ModelClass<IDType>);
    protected abstract toPrimitive(entity: T): object;
    protected abstract entityFieldToColumn(field: keyof T): string;
    protected abstract modelToEntity(model: ModelInstance<IDType>): Promise<T | null> | T | null;
    save(entity: T): Promise<void>;
    getById(id: IDType): Promise<T | null>;
    getAll({ filter, order }?: {
        filter?: string;
        order?: OrderOption<T>;
    }): Promise<T[]>;
    getPage({ filter, order, page, limit }: {
        filter?: string;
        order?: OrderOption<T>;
        page: number;
        limit: number;
    }): Promise<T[]>;
    getCount({ filter }?: {
        filter?: string;
    }): Promise<number>;
}
export {};
